from typing import List, Dict, Any, Optional
import logging
import json
import asyncio
from app.core.config import settings
from app.services.web_search import web_search_service
from app.services.ai_service import call_qwen_api
from app.services.elasticsearch_service import elasticsearch_service
from app.agents.legal_norms import legal_norms_agent
from app.agents.judicial import judicial_practice_agent
from app.agents.analytics import analytics_agent
from app.agents.document_prep import document_prep_agent
from app.agents.document_analysis import document_analysis_agent

logger = logging.getLogger(__name__)

class CoordinatorAgent:
    """
    Coordinator Agent responsible for orchestrating the workflow
    of other specialist agents
    """
    
    def __init__(self):
        self.api_key = settings.OPENROUTER_API_KEY
        self.model = "qwen/qwen2.5-vl-72b-instruct:free"  # Use the most capable model for coordination
        self.es_service = elasticsearch_service
    
    
    async def analyze_query(self, query: str, has_image: bool = False) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–≤–ª–µ—á—å
        """
        # –ü–æ–∏—Å–∫ –±–∞–∑–æ–≤–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        try:
            legal_info = await self.es_service.search_law_chunks(query, top_n=5)
            
            system_prompt = """
            –í—ã - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã –∏–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–∏–µ –∞–≥–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω—ã –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –æ—Ç–≤–µ—Ç–∞ –∏ –≤ –∫–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
            
            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:
            1. legal_norms_agent - –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—Ä–∞–≤–æ–≤—ã–º –Ω–æ—Ä–º–∞–º (–∑–∞–∫–æ–Ω—ã, –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –∫–æ–¥–µ–∫—Å—ã)
            2. judicial_practice_agent - –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ (—Ä–µ—à–µ–Ω–∏—è —Å—É–¥–æ–≤, –æ–±–∑–æ—Ä—ã –ø—Ä–∞–∫—Ç–∏–∫–∏)
            3. analytics_agent - –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Å—Ç–∞—Ç—å–∏, –∫–Ω–∏–≥–∏)
            4. document_prep_agent - –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∏—Å–∫–∏, –∂–∞–ª–æ–±—ã, –¥–æ–≥–æ–≤–æ—Ä—ã)
            5. document_analysis_agent - –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ:
            1. –ö–∞–∫–∏–µ –∞–≥–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω—ã (–Ω–µ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω—ã –≤—Å–µ)
            2. –í –∫–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
            3. –ö–∞–∫–∏–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã —Å–ª–µ–¥—É–µ—Ç –∑–∞–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            
            –û—Ç–≤–µ—Ç—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
            {
                "agents": ["agent1", "agent2"],
                "clarifying_questions": ["–í–æ–ø—Ä–æ—Å 1?", "–í–æ–ø—Ä–æ—Å 2?"],
                "plan": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞",
                "confidence": 0.95
            }
            """
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∞–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            if has_image:
                agents = ["document_analysis_agent"]
                # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                if not query or query.strip() == "":
                    return {
                        "agents": agents,
                        "clarifying_questions": ["–ö–∞–∫–æ–π –∞—Å–ø–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"],
                        "plan": "–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                        "reasoning": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ù–∞—á–Ω—É —Å –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
                    }

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø—Ä–∞–≤–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            user_message = f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}\n\n"
            if legal_info:
                user_message += "–ù–∞–π–¥–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –ø—Ä–∞–≤–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                for i, info in enumerate(legal_info, 1):
                    user_message += f"{i}. {info}\n\n"
            user_message += "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∞–≥–µ–Ω—Ç–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å—ã."
            
            result = await call_qwen_api(
                prompt=user_message,
                system_message=system_prompt,
                api_key=self.api_key,
                max_tokens=2000,
                temperature=0.7
            )
            
            if not result["success"]:
                return {"error": f"API Error: {result.get('error', 'Unknown error')}"}
            
            content = result["text"]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            try:
                json_start = content.find("{")
                json_end = content.rfind("}") + 1
                json_str = content[json_start:json_end]
                analysis = json.loads(json_str)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–∏
                analysis["reasoning"] = f"–ù–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø—Ä–∞–≤–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±—ã–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∞–≥–µ–Ω—Ç—ã: {', '.join(analysis['agents'])}. –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π: {analysis['plan']}"
                
                return analysis
            except Exception as e:
                # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                default_agents = ["legal_norms_agent", "judicial_practice_agent", "analytics_agent"]
                return {
                    "agents": default_agents,
                    "clarifying_questions": ["–£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã?"],
                    "plan": "–ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ—Ä–º, –∏–∑—É—á–µ–Ω–∏–µ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏, —Å–±–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
                    "reasoning": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã: {', '.join(default_agents)}"
                }
        except Exception as e:
            return {
                "error": str(e),
                "agents": ["legal_norms_agent"],
                "reasoning": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π –∞–≥–µ–Ω—Ç –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ—Ä–º."
            }

    async def delegate_to_agents(self, query: str, agent_analysis: Dict[str, Any]) -> Dict[str, Any]:
        """
        –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∞–≥–µ–Ω—Ç–∞–º –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –∏—Ö –æ—Ç–≤–µ—Ç—ã
        """
        results = {}
        if "error" in agent_analysis:
            return {"error": agent_analysis["error"]}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        agents_to_run = agent_analysis.get("agents", [])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = []
        
        for agent_name in agents_to_run:
            if agent_name == "legal_norms_agent":
                tasks.append((agent_name, legal_norms_agent.process_query(query)))
            elif agent_name == "judicial_practice_agent":
                tasks.append((agent_name, judicial_practice_agent.process_query(query)))
            elif agent_name == "analytics_agent":
                tasks.append((agent_name, analytics_agent.process_query(query)))
            elif agent_name == "document_prep_agent":
                tasks.append((agent_name, document_prep_agent.process_query(query)))
            elif agent_name == "document_analysis_agent":
                tasks.append((agent_name, document_analysis_agent.process_query(query)))
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        for agent_name, task in tasks:
            try:
                result = await task
                results[agent_name] = result
            except Exception as e:
                results[agent_name] = {"error": str(e)}
        
        return results

    async def synthesize_response(self, query: str, agent_responses: Dict[str, Any], 
                            agent_analysis: Dict[str, Any] = None) -> Dict[str, str]:
        """
        –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∫ –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç, —Ç–∞–∫ –∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
        """
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
        combined_info = {}
        reasoning_steps = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if agent_analysis and "reasoning" in agent_analysis:
            reasoning_steps.append(f"üîç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä: {agent_analysis['reasoning']}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        for agent_name, response in agent_responses.items():
            if "error" in response:
                reasoning_steps.append(f"‚ùå {agent_name}: {response['error']}")
                continue
                
            reasoning_steps.append(f"‚úÖ {agent_name}: –°–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
            if agent_name == "legal_norms_agent":
                combined_info["legal_norms"] = response.get("legal_norms", [])
                combined_info["legal_analysis"] = response.get("analysis", "")
            elif agent_name == "judicial_practice_agent":
                combined_info["court_decisions"] = response.get("court_decisions", [])
                combined_info["judicial_analysis"] = response.get("analysis", {})
            elif agent_name == "analytics_agent":
                combined_info["analytics"] = response.get("analytics_results", [])
                combined_info["analytics_analysis"] = response.get("analysis", "")
            elif agent_name == "document_prep_agent":
                combined_info["document"] = response.get("document", "")
                combined_info["document_type"] = response.get("document_type", "")
            elif agent_name == "document_analysis_agent":
                combined_info["document_analysis"] = response.get("document_analysis", "")
                combined_info["document_type"] = response.get("document_type", "")
        
        reasoning_steps.append("üîÑ –°–∏–Ω—Ç–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        system_prompt = """
        –í—ã - –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ.
        –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π, —Ç–æ—á–Ω—ã–π –∏ —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ
        –¥–∞–Ω–Ω—ã—Ö, —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏.
        
        –í–∞—à –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω:
        1. –ë—ã—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω—ã–º –∏ –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        2. –°–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É
        3. –ë—ã—Ç—å —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ
        4. –í–∫–ª—é—á–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        5. –ë—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Å–ª–æ–∂–Ω—ã—Ö —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        
        –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–º–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ—Å—å.
        """
        
        user_message = f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}\n\n"
        user_message += f"–°–æ–±—Ä–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{json.dumps(combined_info, ensure_ascii=False, indent=2)}\n\n"
        user_message += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∏–Ω—Ç–µ–∑–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
        
        # –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        result = await call_qwen_api(
            prompt=user_message,
            system_message=system_prompt,
            api_key=self.api_key,
            max_tokens=4000,
            temperature=0.7
        )
        
        if not result["success"]:
            error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ –æ—Ç–≤–µ—Ç–∞: {result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            reasoning_steps.append(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {error_msg}")
            return {
                "answer": error_msg,
                "reasoning": "\n".join(reasoning_steps)
            }
        
        reasoning_steps.append("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
        
        return {
            "answer": result["text"],
            "reasoning": "\n".join(reasoning_steps)
        }

    async def process_query_with_stream(self, query: str, websocket_conn = None) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –∞–≥–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã
        if websocket_conn:
            await websocket_conn.send_json({
                "type": "thinking",
                "content": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å –∏ –æ–ø—Ä–µ–¥–µ–ª—è—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤..."
            })
        
        agent_analysis = await self.analyze_query(query)
        
        if "error" in agent_analysis:
            if websocket_conn:
                await websocket_conn.send_json({
                    "type": "error",
                    "content": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞: {agent_analysis['error']}"
                })
            return {"error": agent_analysis["error"]}
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ WebSocket
        if websocket_conn:
            await websocket_conn.send_json({
                "type": "thinking",
                "content": f"–ü–ª–∞–Ω: {agent_analysis.get('plan', '–ü–ª–∞–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n" +
                        f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã: {', '.join(agent_analysis.get('agents', []))}"
            })
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        if websocket_conn:
            await websocket_conn.send_json({
                "type": "thinking",
                "content": "–ó–∞–ø—É—Å–∫–∞—é –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö..."
            })
        
        agent_responses = await self.delegate_to_agents(query, agent_analysis)
        
        # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        if websocket_conn:
            await websocket_conn.send_json({
                "type": "thinking",
                "content": "–°–∏–Ω—Ç–µ–∑–∏—Ä—É—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö..."
            })
        
        result = await self.synthesize_response(query, agent_responses, agent_analysis)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        if websocket_conn:
            await websocket_conn.send_json({
                "type": "answer",
                "content": result["answer"],
                "reasoning": result["reasoning"]
            })
        
        return result



    async def gather_web_info(self, query: str, max_results: int = 5) -> Dict[str, Any]:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤–µ–±-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        """
        try:
            # –ü–æ–∏—Å–∫ –∏ —Å–∫—Ä–µ–π–ø–∏–Ω–≥ —Å—Ç–∞—Ç–µ–π
            articles = await web_search_service.search_and_scrape(query, max_results)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
            context = {
                "web_sources": [],
                "summary": ""
            }
            
            for article in articles:
                context["web_sources"].append({
                    "title": article["title"],
                    "url": article["url"],
                    "content": article["content"][:1000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
                })
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            if context["web_sources"]:
                sources_summary = "\n".join([
                    f"- {source['title']} ({source['url']})"
                    for source in context["web_sources"]
                ])
                context["summary"] = f"–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n{sources_summary}"
            
            return context
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –≤–µ–±-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
            return {"web_sources": [], "summary": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤–µ–±-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"}

# Create singleton instance
coordinator_agent = CoordinatorAgent()